// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "tvslivecontrol.h"

// Dispatch interfaces referenced by this interface
#include "TVSDisplay.h"

/////////////////////////////////////////////////////////////////////////////
// CTVSLiveControl

IMPLEMENT_DYNCREATE(CTVSLiveControl, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CTVSLiveControl properties

/////////////////////////////////////////////////////////////////////////////
// CTVSLiveControl operations

CTVSDisplay CTVSLiveControl::GetDisplay()
{
	LPDISPATCH result;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

VARIANT CTVSLiveControl::GetLocalConfig(long eItem)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		eItem);
	return result;
}

void CTVSLiveControl::SetLocalConfig(long eItem, const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_VARIANT;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 eItem, &newValue);
}

CString CTVSLiveControl::GetProtocol(long lChID)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		lChID);
	return result;
}

CString CTVSLiveControl::GetAddress(long lChID)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		lChID);
	return result;
}

short CTVSLiveControl::GetPort(long lChID)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms,
		lChID);
	return result;
}

CString CTVSLiveControl::GetLoginName(long lChID)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		lChID);
	return result;
}

short CTVSLiveControl::GetVideoIndex(long lChID)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms,
		lChID);
	return result;
}

short CTVSLiveControl::GetAudioIndex(long lChID)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms,
		lChID);
	return result;
}

long CTVSLiveControl::GetMediaType(long lChID)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		lChID);
	return result;
}

CString CTVSLiveControl::GetCameraName(long lChID)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		lChID);
	return result;
}

long CTVSLiveControl::GetIsEnabled(long lChID)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		lChID);
	return result;
}

long CTVSLiveControl::GetPTZtype(long lChID)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xc, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		lChID);
	return result;
}

BOOL CTVSLiveControl::GetAutoReconnect(long lChID)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xe, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		lChID);
	return result;
}

void CTVSLiveControl::SetAutoReconnect(long lChID, BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_BOOL;
	InvokeHelper(0xe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lChID, bNewValue);
}

long CTVSLiveControl::GetConnectionTimeOut(long lChID)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xf, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		lChID);
	return result;
}

void CTVSLiveControl::SetConnectionTimeOut(long lChID, long nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0xf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lChID, nNewValue);
}

long CTVSLiveControl::GetReconnectionWait(long lChID)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x10, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		lChID);
	return result;
}

void CTVSLiveControl::SetReconnectionWait(long lChID, long nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x10, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lChID, nNewValue);
}

short CTVSLiveControl::GetIOReadWriteTimeOut(long lChID)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x11, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms,
		lChID);
	return result;
}

void CTVSLiveControl::SetIOReadWriteTimeOut(long lChID, short nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I2;
	InvokeHelper(0x11, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lChID, nNewValue);
}

long CTVSLiveControl::Connect(LPCTSTR pAddress, LPCTSTR pLoginName, LPCTSTR pPassword)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BSTR;
	InvokeHelper(0x12, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		pAddress, pLoginName, pPassword);
	return result;
}

void CTVSLiveControl::Disconnect(long lChID)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x13, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lChID);
}

BOOL CTVSLiveControl::Play(long lChID)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x14, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		lChID);
	return result;
}

BOOL CTVSLiveControl::Pause(long lChID)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x15, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		lChID);
	return result;
}

void CTVSLiveControl::StartTalking(long lChID)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x16, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lChID);
}

void CTVSLiveControl::StopTalking(long lChID)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x17, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lChID);
}

void CTVSLiveControl::Snapshot(long lChID, long lCompression, BOOL bAutoSave)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_BOOL;
	InvokeHelper(0x18, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lChID, lCompression, bAutoSave);
}

void CTVSLiveControl::PreviewSnapshot(long lChID)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x19, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lChID);
}

void CTVSLiveControl::SaveSnapshot(long lChID, long lCompression, LPCTSTR pFilename)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_BSTR;
	InvokeHelper(0x1a, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lChID, lCompression, pFilename);
}

void CTVSLiveControl::StartStreamDataEvent(long lChID, long eFormat)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x1b, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lChID, eFormat);
}

void CTVSLiveControl::StopStreamDataEvent(long lChID, long eFormat)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x1c, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lChID, eFormat);
}

BOOL CTVSLiveControl::SetDO(long lChID, short nIndex, long pValue)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_I4;
	InvokeHelper(0x1d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		lChID, nIndex, pValue);
	return result;
}

long CTVSLiveControl::GetDI(long lChID, short nIndex)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I2;
	InvokeHelper(0x1e, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		lChID, nIndex);
	return result;
}

long CTVSLiveControl::GetDO(long lChID, short nIndex)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I2;
	InvokeHelper(0x60, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		lChID, nIndex);
	return result;
}

long CTVSLiveControl::GetMotion(long lChID)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x61, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		lChID);
	return result;
}

long CTVSLiveControl::GetVideoLoss(long lChID)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x62, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		lChID);
	return result;
}

long CTVSLiveControl::GetRecord(long lChID)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x63, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		lChID);
	return result;
}

BOOL CTVSLiveControl::SendSerialData(long lChID, short nIndex, const VARIANT& vData)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_VARIANT;
	InvokeHelper(0x1f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		lChID, nIndex, &vData);
	return result;
}

BOOL CTVSLiveControl::SendPTZCommand(long lChID, long eCmd)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x20, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		lChID, eCmd);
	return result;
}

BOOL CTVSLiveControl::SetPTZControlSpeed(long lChID, short nType, long lSpeed)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_I4;
	InvokeHelper(0x21, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		lChID, nType, lSpeed);
	return result;
}

VARIANT CTVSLiveControl::GetPTZPresetList(long lChID)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x22, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		lChID);
	return result;
}

BOOL CTVSLiveControl::SetPTZPreset(long lChID, const VARIANT& vPresetID)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_VARIANT;
	InvokeHelper(0x23, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		lChID, &vPresetID);
	return result;
}

BOOL CTVSLiveControl::GetPTZPosition(long lChID, long* plPan, long* plTilt, long* plZoom, long* plFocus)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_PI4 VTS_PI4 VTS_PI4 VTS_PI4;
	InvokeHelper(0x52, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		lChID, plPan, plTilt, plZoom, plFocus);
	return result;
}

BOOL CTVSLiveControl::SetPTZPosition(long lChID, long lPan, long lTilt, long lZoom, long lFocus)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x53, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		lChID, lPan, lTilt, lZoom, lFocus);
	return result;
}

BOOL CTVSLiveControl::ClearPTZPreset(long lChID, const VARIANT& vPresetID)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_VARIANT;
	InvokeHelper(0x59, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		lChID, &vPresetID);
	return result;
}

BOOL CTVSLiveControl::GoToPTZPreset(long lChID, const VARIANT& vPresetID)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_VARIANT;
	InvokeHelper(0x5a, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		lChID, &vPresetID);
	return result;
}

BOOL CTVSLiveControl::GetDeinterlacing(long lChID)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x24, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		lChID);
	return result;
}

void CTVSLiveControl::SetDeinterlacing(long lChID, BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_BOOL;
	InvokeHelper(0x24, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lChID, bNewValue);
}

BOOL CTVSLiveControl::GetKeepAspectRatio(long lChID)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x25, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		lChID);
	return result;
}

void CTVSLiveControl::SetKeepAspectRatio(long lChID, BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_BOOL;
	InvokeHelper(0x25, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lChID, bNewValue);
}

BOOL CTVSLiveControl::GetViewKeyFrameOnly(long lChID)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x26, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		lChID);
	return result;
}

void CTVSLiveControl::SetViewKeyFrameOnly(long lChID, BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_BOOL;
	InvokeHelper(0x26, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lChID, bNewValue);
}

BOOL CTVSLiveControl::GetDecodeVisibleChannelOnly(long lChID)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x27, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		lChID);
	return result;
}

void CTVSLiveControl::SetDecodeVisibleChannelOnly(long lChID, BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_BOOL;
	InvokeHelper(0x27, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lChID, bNewValue);
}

VARIANT CTVSLiveControl::GetStatistics(long lChID, long eParam)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x54, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		lChID, eParam);
	return result;
}

VARIANT CTVSLiveControl::GetServerConfig(long lChID, long eParam)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x55, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		lChID, eParam);
	return result;
}

void CTVSLiveControl::SetServerConfig(long lChID, long eParam, const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_VARIANT;
	InvokeHelper(0x55, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lChID, eParam, &newValue);
}

BOOL CTVSLiveControl::SetMotionRegionEdit(long lChID, long lMode, long lVideoMode)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x56, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		lChID, lMode, lVideoMode);
	return result;
}

BOOL CTVSLiveControl::ConfigCameraModule(long lChID, long lCode, long lState)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x57, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		lChID, lCode, lState);
	return result;
}

CString CTVSLiveControl::GetServerName(long lChID)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x30, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		lChID);
	return result;
}

void CTVSLiveControl::SetServerName(long lChID, LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_BSTR;
	InvokeHelper(0x30, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lChID, lpszNewValue);
}

long CTVSLiveControl::GetServerType(long lChID)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x31, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		lChID);
	return result;
}

long CTVSLiveControl::GetVideoChnls(long lChID)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x32, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		lChID);
	return result;
}

long CTVSLiveControl::GetAudioChnls(long lChID)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x33, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		lChID);
	return result;
}

long CTVSLiveControl::GetDIChnls(long lChID)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x34, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		lChID);
	return result;
}

long CTVSLiveControl::GetDOChnls(long lChID)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x35, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		lChID);
	return result;
}

long CTVSLiveControl::GetVideoCodec(long lChID)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x36, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		lChID);
	return result;
}

long CTVSLiveControl::GetAudioCodec(long lChID)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x37, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		lChID);
	return result;
}

long CTVSLiveControl::GetServerTime(long lChID)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x38, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		lChID);
	return result;
}

long CTVSLiveControl::GetServerTimeZone(long lChID)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x39, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		lChID);
	return result;
}

BOOL CTVSLiveControl::GetLogEvent()
{
	BOOL result;
	InvokeHelper(0x3c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CTVSLiveControl::SetLogEvent(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x3c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

long CTVSLiveControl::GetStorageRecycle()
{
	long result;
	InvokeHelper(0x3d, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CTVSLiveControl::SetStorageRecycle(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CTVSLiveControl::GetPreEventTime(long lChID)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		lChID);
	return result;
}

void CTVSLiveControl::SetPreEventTime(long lChID, long nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x3e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lChID, nNewValue);
}

long CTVSLiveControl::GetPostEventTime(long lChID)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3f, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		lChID);
	return result;
}

void CTVSLiveControl::SetPostEventTime(long lChID, long nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x3f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lChID, nNewValue);
}

VARIANT CTVSLiveControl::GetAllocSize(LPCTSTR pPath)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x40, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		pPath);
	return result;
}

VARIANT CTVSLiveControl::GetUsedSize(LPCTSTR pPath)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x41, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		pPath);
	return result;
}

BOOL CTVSLiveControl::RecordDuration(LPCTSTR pPath, VARIANT* pvBegin, VARIANT* pvEnd)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_PVARIANT VTS_PVARIANT;
	InvokeHelper(0x42, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		pPath, pvBegin, pvEnd);
	return result;
}

VARIANT CTVSLiveControl::GetStorageList()
{
	VARIANT result;
	InvokeHelper(0x43, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

BOOL CTVSLiveControl::AllocStorage(LPCTSTR pPath, long mbSize)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(0x44, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		pPath, mbSize);
	return result;
}

BOOL CTVSLiveControl::AllocStorageFast(LPCTSTR pPath, long mbSize)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(0x64, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		pPath, mbSize);
	return result;
}

BOOL CTVSLiveControl::CancelAllocStorage(LPCTSTR pPath)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x65, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		pPath);
	return result;
}

void CTVSLiveControl::GetDiskList(VARIANT* pvData)
{
	static BYTE parms[] =
		VTS_PVARIANT;
	InvokeHelper(0x66, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 pvData);
}

long CTVSLiveControl::Connect2(LPCTSTR pAddress, LPCTSTR pLoginName, LPCTSTR pPassword, LPCTSTR pSSAddress, LPCTSTR pSSLoginName, LPCTSTR pSSPassword)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR;
	InvokeHelper(0x67, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		pAddress, pLoginName, pPassword, pSSAddress, pSSLoginName, pSSPassword);
	return result;
}

BOOL CTVSLiveControl::GetVideoOn(long lChID)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x68, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		lChID);
	return result;
}

void CTVSLiveControl::SetVideoOn(long lChID, BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_BOOL;
	InvokeHelper(0x68, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lChID, bNewValue);
}

BOOL CTVSLiveControl::FreeStorage(LPCTSTR pPath)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x45, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		pPath);
	return result;
}

BOOL CTVSLiveControl::AddStorage(LPCTSTR pPath)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x46, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		pPath);
	return result;
}

BOOL CTVSLiveControl::DropStorage(LPCTSTR pPath)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x47, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		pPath);
	return result;
}

BOOL CTVSLiveControl::FreeRecordPeriod(LPCTSTR pPath, const VARIANT& vBegin, const VARIANT& vEnd)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x58, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		pPath, &vBegin, &vEnd);
	return result;
}

BOOL CTVSLiveControl::GetFormatting()
{
	BOOL result;
	InvokeHelper(0x5c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

VARIANT CTVSLiveControl::GetFormatResult()
{
	VARIANT result;
	InvokeHelper(0x5d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

long CTVSLiveControl::GetEventForChannelRecord(long lChID, long eEventType, long* pEventMap)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_PI4;
	InvokeHelper(0x48, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		lChID, eEventType, pEventMap);
	return result;
}

long CTVSLiveControl::SetEventForChannelRecord(long lChID, long eEventType, long lEventMap)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x49, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		lChID, eEventType, lEventMap);
	return result;
}

long CTVSLiveControl::GetRecordingMode(long lChID)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x4a, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		lChID);
	return result;
}

void CTVSLiveControl::SetRecordingMode(long lChID, long nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x4a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lChID, nNewValue);
}

BOOL CTVSLiveControl::StartRecord()
{
	BOOL result;
	InvokeHelper(0x4b, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CTVSLiveControl::StopRecord()
{
	BOOL result;
	InvokeHelper(0x4c, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CTVSLiveControl::GetRecording()
{
	BOOL result;
	InvokeHelper(0x5b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

long CTVSLiveControl::StartFileRecord(long lChID, BOOL bAudio, LPCTSTR pPath)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_BOOL VTS_BSTR;
	InvokeHelper(0x4d, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		lChID, bAudio, pPath);
	return result;
}

BOOL CTVSLiveControl::StopFileRecord(long lSession)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x4e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		lSession);
	return result;
}

long CTVSLiveControl::GetChannelState(long lChID)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x4f, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		lChID);
	return result;
}

void CTVSLiveControl::SetMute(long lChID, BOOL bMute)
{
	static BYTE parms[] =
		VTS_I4 VTS_BOOL;
	InvokeHelper(0x50, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lChID, bMute);
}

BOOL CTVSLiveControl::GetMute(long lChID)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x51, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		lChID);
	return result;
}

void CTVSLiveControl::SetRecordingOrder(long lChID, long nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x69, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lChID, nNewValue);
}

void CTVSLiveControl::PlayWaveToServer(long lChID, LPCTSTR pPath)
{
	static BYTE parms[] =
		VTS_I4 VTS_BSTR;
	InvokeHelper(0x6b, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lChID, pPath);
}

void CTVSLiveControl::StopWaveToServer(long lChID)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x6c, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lChID);
}

void CTVSLiveControl::StartOnScreenPTZ()
{
	InvokeHelper(0x6d, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CTVSLiveControl::StopOnScreenPTZ()
{
	InvokeHelper(0x6e, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

HRESULT CTVSLiveControl::put_DecodingOption(long param, long val)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(113, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		param, val);
	return S_OK;
}

HRESULT CTVSLiveControl::get_DecodingOption(long param, long *val)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(113, DISPATCH_PROPERTYGET, VT_I4, (void*)val, parms,
		param);
	return S_OK;
}

void CTVSLiveControl::GetSnapshot(long lChID, long lCompression, long xWidth, long yHeight, VARIANT* data, long* size)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_PVARIANT VTS_PI4;
	InvokeHelper(0x72, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		lChID, lCompression, xWidth, yHeight, data, size);
}
