#if !defined(AFX_TVSLIVECONTROL_H__C655E91D_191E_4287_9619_CFD1722220A5__INCLUDED_)
#define AFX_TVSLIVECONTROL_H__C655E91D_191E_4287_9619_CFD1722220A5__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000
// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


// Dispatch interfaces referenced by this interface
class CTVSDisplay;

/////////////////////////////////////////////////////////////////////////////
// CTVSLiveControl wrapper class

class CTVSLiveControl : public CWnd
{
protected:
	DECLARE_DYNCREATE(CTVSLiveControl)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0x575a6bf1, 0x1460, 0x4907, { 0x91, 0x57, 0xbe, 0xcb, 0x7d, 0xca, 0xc6, 0x55 } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName,
		LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect,
		CWnd* pParentWnd, UINT nID,
		CCreateContext* pContext = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); }

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect, CWnd* pParentWnd, UINT nID,
		CFile* pPersist = NULL, BOOL bStorage = FALSE,
		BSTR bstrLicKey = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); }

// Attributes
public:

// Operations
public:
    CTVSDisplay GetDisplay();
	VARIANT GetLocalConfig(long eItem);
	void SetLocalConfig(long eItem, const VARIANT& newValue);
	CString GetProtocol(long lChID);
	CString GetAddress(long lChID);
	short GetPort(long lChID);
	CString GetLoginName(long lChID);
	short GetVideoIndex(long lChID);
	short GetAudioIndex(long lChID);
	long GetMediaType(long lChID);
	CString GetCameraName(long lChID);
	long GetIsEnabled(long lChID);
	long GetPTZtype(long lChID);
	BOOL GetAutoReconnect(long lChID);
	void SetAutoReconnect(long lChID, BOOL bNewValue);
	long GetConnectionTimeOut(long lChID);
	void SetConnectionTimeOut(long lChID, long nNewValue);
	long GetReconnectionWait(long lChID);
	void SetReconnectionWait(long lChID, long nNewValue);
	short GetIOReadWriteTimeOut(long lChID);
	void SetIOReadWriteTimeOut(long lChID, short nNewValue);
	long Connect(LPCTSTR pAddress, LPCTSTR pLoginName, LPCTSTR pPassword);
	void Disconnect(long lChID);
	BOOL Play(long lChID);
	BOOL Pause(long lChID);
	void StartTalking(long lChID);
	void StopTalking(long lChID);
	void Snapshot(long lChID, long lCompression, BOOL bAutoSave);
	void PreviewSnapshot(long lChID);
	void SaveSnapshot(long lChID, long lCompression, LPCTSTR pFilename);
	void StartStreamDataEvent(long lChID, long eFormat);
	void StopStreamDataEvent(long lChID, long eFormat);
	BOOL SetDO(long lChID, short nIndex, long pValue);
	long GetDI(long lChID, short nIndex);
	long GetDO(long lChID, short nIndex);
	long GetMotion(long lChID);
	long GetVideoLoss(long lChID);
	long GetRecord(long lChID);
	BOOL SendSerialData(long lChID, short nIndex, const VARIANT& vData);
	BOOL SendPTZCommand(long lChID, long eCmd);
	BOOL SetPTZControlSpeed(long lChID, short nType, long lSpeed);
	VARIANT GetPTZPresetList(long lChID);
	BOOL SetPTZPreset(long lChID, const VARIANT& vPresetID);
	BOOL GetPTZPosition(long lChID, long* plPan, long* plTilt, long* plZoom, long* plFocus);
	BOOL SetPTZPosition(long lChID, long lPan, long lTilt, long lZoom, long lFocus);
	BOOL ClearPTZPreset(long lChID, const VARIANT& vPresetID);
	BOOL GoToPTZPreset(long lChID, const VARIANT& vPresetID);
	BOOL GetDeinterlacing(long lChID);
	void SetDeinterlacing(long lChID, BOOL bNewValue);
	BOOL GetKeepAspectRatio(long lChID);
	void SetKeepAspectRatio(long lChID, BOOL bNewValue);
	BOOL GetViewKeyFrameOnly(long lChID);
	void SetViewKeyFrameOnly(long lChID, BOOL bNewValue);
	BOOL GetDecodeVisibleChannelOnly(long lChID);
	void SetDecodeVisibleChannelOnly(long lChID, BOOL bNewValue);
	VARIANT GetStatistics(long lChID, long eParam);
	VARIANT GetServerConfig(long lChID, long eParam);
	void SetServerConfig(long lChID, long eParam, const VARIANT& newValue);
	BOOL SetMotionRegionEdit(long lChID, long lMode, long lVideoMode);
	BOOL ConfigCameraModule(long lChID, long lCode, long lState);
	CString GetServerName(long lChID);
	void SetServerName(long lChID, LPCTSTR lpszNewValue);
	long GetServerType(long lChID);
	long GetVideoChnls(long lChID);
	long GetAudioChnls(long lChID);
	long GetDIChnls(long lChID);
	long GetDOChnls(long lChID);
	long GetVideoCodec(long lChID);
	long GetAudioCodec(long lChID);
	long GetServerTime(long lChID);
	long GetServerTimeZone(long lChID);
	BOOL GetLogEvent();
	void SetLogEvent(BOOL bNewValue);
	long GetStorageRecycle();
	void SetStorageRecycle(long nNewValue);
	long GetPreEventTime(long lChID);
	void SetPreEventTime(long lChID, long nNewValue);
	long GetPostEventTime(long lChID);
	void SetPostEventTime(long lChID, long nNewValue);
	VARIANT GetAllocSize(LPCTSTR pPath);
	VARIANT GetUsedSize(LPCTSTR pPath);
	BOOL RecordDuration(LPCTSTR pPath, VARIANT* pvBegin, VARIANT* pvEnd);
	VARIANT GetStorageList();
	BOOL AllocStorage(LPCTSTR pPath, long mbSize);
	BOOL AllocStorageFast(LPCTSTR pPath, long mbSize);
	BOOL CancelAllocStorage(LPCTSTR pPath);
	void GetDiskList(VARIANT* pvData);
	long Connect2(LPCTSTR pAddress, LPCTSTR pLoginName, LPCTSTR pPassword, LPCTSTR pSSAddress, LPCTSTR pSSLoginName, LPCTSTR pSSPassword);
	BOOL GetVideoOn(long lChID);
	void SetVideoOn(long lChID, BOOL bNewValue);
	BOOL FreeStorage(LPCTSTR pPath);
	BOOL AddStorage(LPCTSTR pPath);
	BOOL DropStorage(LPCTSTR pPath);
	BOOL FreeRecordPeriod(LPCTSTR pPath, const VARIANT& vBegin, const VARIANT& vEnd);
	BOOL GetFormatting();
	VARIANT GetFormatResult();
	// method 'SetServerConfig' not emitted because of invalid return type or parameter type
	// method 'GetServerConfig' not emitted because of invalid return type or parameter type
	long GetEventForChannelRecord(long lChID, long eEventType, long* pEventMap);
	long SetEventForChannelRecord(long lChID, long eEventType, long lEventMap);
	long GetRecordingMode(long lChID);
	void SetRecordingMode(long lChID, long nNewValue);
	BOOL StartRecord();
	BOOL StopRecord();
	BOOL GetRecording();
	long StartFileRecord(long lChID, BOOL bAudio, LPCTSTR pPath);
	BOOL StopFileRecord(long lSession);
	long GetChannelState(long lChID);
	void SetMute(long lChID, BOOL bMute);
	BOOL GetMute(long lChID);
	void SetRecordingOrder(long lChID, long nNewValue);
	// method 'SendVSNMCommand' not emitted because of invalid return type or parameter type
	void PlayWaveToServer(long lChID, LPCTSTR pPath);
	void StopWaveToServer(long lChID);
	void StartOnScreenPTZ();
	void StopOnScreenPTZ();
	void GetSnapshot(long lChID, long lCompression, long xWidth, long yHeight, VARIANT* data, long* size);

	HRESULT put_DecodingOption(long param, long val);
	HRESULT get_DecodingOption(long param, long *val);
};

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(AFX_TVSLIVECONTROL_H__C655E91D_191E_4287_9619_CFD1722220A5__INCLUDED_)
